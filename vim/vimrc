" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/bundle')

function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !./install.py --clang-completer
  endif
endfunction
function! BuildMD(info)
  if a:info.status == 'installed' || a:info.force
    !sudo npm -g install instant-markdown-d
  endif
endfunction
" function! BuildVimtex(info)
"   if a:info.status == 'installed' || a:info.force
"     !pip3 install neovim-remote
"   endif
" endfunction
" Make sure you use single quotes
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction
" Plug 'roxma/nvim-completion-manager' | Plug 'roxma/ncm-clang'
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } | Plug 'zchee/deoplete-clang'
" Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp', 'tex', 'python', 'sh'], 'do': function('BuildYCM') }
" Plug 'zxqfl/tabnine-vim'
" Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'honza/vim-snippets'
Plug 'w0rp/ale', { 'for': ['sh', 'tex', 'latex', 'text']} "apt-get install shellcheck, vale or writegood or proselint
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } | Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' } "| Plug 'jistr/vim-nerdtree-tabs', { 'on': 'NERDTreeToggle' }
Plug 'tomtom/tcomment_vim'
Plug 'majutsushi/tagbar' "need exuberant ctag installed
Plug 'bling/vim-airline'
Plug 'rhysd/vim-grammarous'
Plug 'reedes/vim-lexical'
" Plug 'ConradIrwin/vim-bracketed-paste'
" Plug 'junegunn/rainbow_parentheses.vim'

" Plug 'justinmk/vim-sneak'
Plug 'Lokaltog/vim-easymotion'
Plug 'mileszs/ack.vim' "need ack (now is ag instead) installed
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } | Plug 'junegunn/fzf.vim'
" Plug 'vim-scripts/a.vim'
" Plug 'vim-scripts/matchit.zip'
Plug 'andymass/vim-matchup'
" Plug 'vim-ctrlspace/vim-ctrlspace'

Plug 'mbbill/undotree', { 'do': 'mkdir ~/.undodir'}
" Plug 'spf13/vim-autoclose'
Plug 'jiangmiao/auto-pairs'
Plug 'terryma/vim-multiple-cursors'
" Plug 'mg979/vim-visual-multi', { 'branch': 'devel'}
Plug 'tpope/vim-surround'
Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-repeat'
Plug 'junegunn/vim-easy-align',  { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-fugitive'
Plug 'AndrewRadev/linediff.vim'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'airblade/vim-gitgutter'

"Plug 'godlygeek/csapprox' "for color
"Plug 'jellybeans.vim'
Plug 'morhetz/gruvbox'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'Konfekt/FastFold' "make fold fast
" Plug 'gi1242/vim-tex-syntax' "make tex fast
Plug 'lervag/vimtex' "required vim with +clientserver; alias vim='vim --servername vim', set okular with 'vim --remote-silent +%l \"%f\"'
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'}
" Plug 'vim-scripts/Conque-GDB', { 'on': 'GDB' }
" Plug 'critiqjo/lldb.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'huawenyu/neogdb.vim', { 'on': 'GDB'}
Plug 'sakhnik/nvim-gdb', { 'do': ':UpdateRemotePlugins' }
" Plug 'myusuf3/numbers.vim'
" Plug 'simeji/winresizer'
Plug 'mhinz/vim-startify'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
" Plug 'yuttie/hydrangea-vim'
" Plug 't9md/vim-choosewin'
" Plug 'zchee/clang-server'
" Plug 'ajh17/VimCompletesMe'
" function! BuildComposer(info)
"   if a:info.status != 'unchanged' || a:info.force
"     if has('nvim')
"       !cargo build --release
"     else
"       !cargo build --release --no-default-features --features json-rpc
"     endif
"   endif
" endfunction
" Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
" Plug 'svermeulen/vim-easyclip'
Plug 'vim-scripts/ReplaceWithRegister'
" Plug 'sbdchd/neoformat'
" Plug 'justinmk/vim-dirvish'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'google/vim-searchindex'
Plug 'kshenoy/vim-signature'
Plug 'Yggdroot/indentLine', { 'for': ['cpp', 'c']}
Plug 'tpope/vim-markdown' | Plug 'suan/vim-instant-markdown', { 'do': function('BuildMD') }
Plug 'machakann/vim-highlightedyank'
Plug 'ryanoasis/vim-devicons'
Plug 'sk1418/HowMuch'
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
Plug 'justinmk/vim-gtfo'
Plug 'wellle/tmux-complete.vim'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': 'yarn install --frozen-lockfile'}

" Initialize plugin system
call plug#end()

augroup vimrc
  autocmd!
augroup END
set encoding=UTF-8
set number
" set relativenumber
set lazyredraw
syntax enable
set termguicolors
set confirm
set autoindent
set cindent
set smartindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set nojoinspaces
set noswapfile
set ignorecase
set hlsearch
set smartcase
set incsearch
set backspace=indent,eol,start
set showcmd
set wildmenu
set ttimeout
set ttimeoutlen=100
" set foldmethod=marker
set foldlevel=100
set completeopt=longest,menu
set scrolloff=1
set autoread
set cursorline
set hidden
set clipboard=unnamed
set shortmess+=c

" augroup fmt
"  autocmd!
"  " autocmd BufWritePre * undojoin | Neoformat
"  autocmd BufWritePre * try | undojoin | Neoformat | catch /^Vim\%((\a\+)\)\=:E790/ | finally | silent Neoformat | endtry
" augroup END

inoremap <silent> jk <esc>
cnoremap <silent> jk <c-c>
if (has('nvim'))
  tnoremap <silent> jk <c-\><c-n>
endif
xnoremap <silent> v <c-c>
let mapleader = "\<space>"

nnoremap <silent> <leader>. :cd %:p:h<CR>

" Jump to the last edited line
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"zz" | endif

augroup latex
  autocmd!
  autocmd filetype plaintex,tex setlocal colorcolumn=80
        \ tabstop=2
        \ shiftwidth=2
        \ softtabstop=2
augroup end

" Treat long lines as break lines
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
" Disable highlight when <leader><CR>
noremap <silent> <leader>hc :noh<CR>
" hi CursorLine cterm=NONE ctermbg=darkgray ctermfg=white guibg=darkgray guifg=white
" switch between windows
" nnoremap <silent> <c-h> <c-w>h
" nnoremap <silent> <c-j> <c-w>j
" nnoremap <silent> <c-k> <c-w>k
" nnoremap <silent> <c-l> <c-w>l
nnoremap <silent> = :vertical resize +5<cr>
nnoremap <silent> - :vertical resize -5<cr>
nnoremap <silent> <leader>= :resize +5<cr>
nnoremap <silent> <leader>- :resize -5<cr>

nnoremap <leader>w :update<cr>
nnoremap <Leader>q :q<cr>
nnoremap <Leader>Q :qa!<cr>

" Make Y behave like other capitals
nnoremap Y y$

" qq to record, Q to replay
nnoremap Q @q
" ----------------------------------------------------------------------------
" Quickfix
" ----------------------------------------------------------------------------
nnoremap <leader>c :cclose<bar>lclose<cr>
nnoremap ]q :cnext<cr>zz
nnoremap [q :cprev<cr>zz
nnoremap ]l :lnext<cr>zz
nnoremap [l :lprev<cr>zz

" ----------------------------------------------------------------------------
" Buffers
" ----------------------------------------------------------------------------
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>

" ----------------------------------------------------------------------------
" Tabs
" ----------------------------------------------------------------------------
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>

" ----------------------------------------------------------------------------
" <tab> / <s-tab> | Circular windows navigation
" ----------------------------------------------------------------------------
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" Jump list (to newer position)
nnoremap <C-p> <C-i>

" ----------------------------------------------------------------------------
" Help in new tabs
" ----------------------------------------------------------------------------
function! s:helptab()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction
autocmd BufEnter *.txt call s:helptab()

" ----------------------------------------------------------------------------
" cop to toggle setting
" ----------------------------------------------------------------------------
function! s:map_change_option(...)
  let [key, opt] = a:000[0:1]
  let op = get(a:, 3, 'set '.opt.'!')
  execute printf("nnoremap co%s :%s<bar>set %s?<cr>", key, op, opt)
endfunction

call s:map_change_option('r', 'relativenumber')

nnoremap zf zfa{ za

" ----------------------------------------------------------------------------
" Zoom
" ----------------------------------------------------------------------------
function! s:zoom()
  if winnr('$') > 1
    tab split
  elseif len(filter(map(range(tabpagenr('$')), 'tabpagebuflist(v:val + 1)'),
        \ 'index(v:val, '.bufnr('').') >= 0')) > 1
    tabclose
  endif
endfunction
nnoremap <silent> <leader>z :call <sid>zoom()<cr>

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#clang#libclang_path = "/usr/lib/llvm-3.8/lib/libclang.so.1"
let g:deoplete#sources#clang#clang_header = "/usr/lib/llvm-3.8/lib/clang"

" nvim-completion-manager
let g:cm_matcher = {'module': 'cm_matchers.fuzzy_matcher', 'case': 'smartcase'}

" vim-visual-multi
let g:VM_default_mappings = 0
let g:VM_maps = {}
let g:VM_maps["Skip Region"] = '<C-x>'
let g:VM_maps["Find Next"] = '<C-n>'
let g:VM_maps["Find Prev"] = '<C-p>'

" Ack
if executable('rg')
  " let g:ackprg = 'ag --nogroup --nocolor --column'
  let g:ackprg = 'rg --vimgrep'
endif
let g:ack_autoclose = 0

" fzf
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-i': 'split',
      \ 'ctrl-s': 'vsplit' }
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" vim-ctrlspace
if executable("ag")
  let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif
let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
let g:CtrlSpaceSaveWorkspaceOnExit = 1
nnoremap <leader>s :CtrlSpace<cr>

" NERD
noremap <silent> <F6> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"nmap <c-t> :browse tabnew<CR>M
"imap <c-t> <Esc>:browse tabnew<CR>M

" easy-motion
map <Leader> <Plug>(easymotion-prefix)
map <silent> <Leader>ml <Plug>(easymotion-lineforward)
map <silent> <Leader>mj <Plug>(easymotion-j)
map <silent> <Leader>mk <Plug>(easymotion-k)
map <silent> <Leader>mh <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " Keep cursor colum when JK motion

" vim-sneak
let g:sneak#s_next = 1

" airline
set laststatus=2 "show status line even when only single window is opened

" tagbar
noremap <silent> <F7> :TagbarToggle<CR>
let g:tagbar_sort = 0

" a.vim
" nnoremap <leader>a :A<CR>
" augroup unmap_space
"   autocmd!
"   autocmd vimEnter * iunmap <leader>ihn
"   autocmd vimEnter * iunmap <leader>ih
"   autocmd vimEnter * iunmap <leader>is
" augroup END
" ----------------------------------------------------------------------------
" :A
" ----------------------------------------------------------------------------
function! s:a(cmd)
  let name = expand('%:r')
  let ext = tolower(expand('%:e'))
  let sources = ['c', 'cc', 'cpp', 'cxx']
  let headers = ['h', 'hh', 'hpp', 'hxx']
  for pair in [[sources, headers], [headers, sources]]
    let [set1, set2] = pair
    if index(set1, ext) >= 0
      for h in set2
        let aname = name.'.'.h
        for a in [aname, toupper(aname)]
          if filereadable(a)
            execute a:cmd a
            return
          end
        endfor
      endfor
    endif
  endfor
endfunction
command! A call s:a('e')
command! AV call s:a('botright vertical split')
nnoremap <silent> <leader>a :call <sid>a('e')<cr>

" vim-autoclose
let g:autoclose_vim_commentmode = 1

" tex-conceal
" set conceallevel=2
" let g:tex_conceal="abdgm"

" vimtex
let g:tex_flavor = 'latex'
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'
let g:vimtex_quickfix_latexlog = {'default' : 0}
" let g:vimtex_quickfix_latexlog = {
"       \ 'overfull' : 0,
"       \ 'underfull' : 0,
"       \ 'font' : 0,
"       \}
let g:vimtex_compiler_progname='nvr'

" gruvbox
let g:gruvbox_italic=1
colorscheme gruvbox
set background=dark

" undotree
nnoremap <F8> :UndotreeToggle<cr>
if has("persistent_undo")
  set undodir=~/.undodir/
  set undofile
endif

" vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" vim-surround
autocmd fileType plaintex,tex let b:surround_{char2nr('b')} = "\\textbf{\r}"
autocmd fileType plaintex,tex let b:surround_{char2nr('i')} = "\\textit{\r}"
autocmd fileType plaintex,tex let b:surround_{char2nr('$')} = "$\r$"
autocmd fileType plaintex,tex let g:surround_{char2nr('c')} = "\\\1command\1{\r}"

" vim-easy-align
let g:easy_align_delimiters = {
      \  't': { 'pattern': '\t',  'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 }
      \}

" vim-textobj-user
let g:textobj_numeral_pattern = '\%(\<[[:digit:]]\+\%(\.[[:digit:]]\+\)\=\%([Ee][[:digit:]]\+\)\=\>\|\<0[xXbBoOdD][[:xdigit:]]\+\>\)'
let g:textobj_solution_pattern = g:textobj_numeral_pattern . '(' . g:textobj_numeral_pattern . ')'
call textobj#user#plugin('number', {
      \   '-': {
      \     'pattern': g:textobj_numeral_pattern,
      \     'select': ['an', 'in'],
      \   },
      \   's': {
      \     'pattern': g:textobj_solution_pattern,
      \     'select': ['as', 'is'],
      \   }
      \ })


" nvim-gdb
command! -complete=file -nargs=1 Gdb call plug#load('nvim-gdb') | GdbStart gdb -q <args>
let g:nvimgdb_disable_start_keymaps = 1

" vim-grammarous
let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs) abort
  nmap <buffer>gn <Plug>(grammarous-move-to-next-error)
  nmap <buffer>gp <Plug>(grammarous-move-to-previous-error)
  nmap <buffer>gf <Plug>(grammarous-fixit)
endfunction
function! g:grammarous#hooks.on_reset(errs) abort
  nunmap <buffer>gn
  nunmap <buffer>gp
  nunmap <buffer>gf
endfunction

" vim-lexical
augroup lexical
  autocmd!
  autocmd FileType text call lexical#init()
  autocmd FileType plaintex,tex call lexical#init()
  autocmd FileType markdown call lexical#init()
augroup END
let g:lexical#spell_key = '<leader>s'

" vim-diff-enhanced
if &diff
  let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif

" auto-pairs
augroup auto-pairs
  autocmd!
  autocmd FileType plaintex,tex let g:AutoPairs['$']='$'
augroup END

" python
autocmd FileType python nnoremap <Leader>i :!isort %<CR><CR>
autocmd FileType python vnoremap = :!yapf<CR>


" vim-startify
let g:startify_files_number=5
let g:startify_files_number=5
let g:startify_list_order = [
      \ ["   MRU " . getcwd()],
      \ 'dir',
      \ ['   MRU'],
      \ 'files',
      \ ['   sessions:'],
      \ 'sessions',
      \ ]


" visual star
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  " Use this line instead of the above to match matches spanning across lines
  "let @/ = '\V' . substitute(escape(@@, '\'), '\_s\+', '\\_s\\+', 'g')
  call histadd('/', substitute(@/, '[?/]', '\="\\%d".char2nr(submatch(0))', 'g'))
  let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>/<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>?<CR>

" vim-gitgutter
set updatetime=100

" ----------------------------------------------------------------------------
" goyo.vim + limelight.vim
" ----------------------------------------------------------------------------
let g:limelight_paragraph_span = 1
let g:limelight_priority = -1

function! s:goyo_enter()
  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
  endif
  Limelight
  let &l:statusline = '%M'
  hi StatusLine ctermfg=red guifg=red cterm=NONE gui=NONE
endfunction

function! s:goyo_leave()
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
  endif
  Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

nnoremap <Leader>G :Goyo<CR>
nnoremap <Leader>mm :make<CR>

" indentLine
let g:indentLine_char = '┆'
" let g:indentLine_setColors = 0
let g:indentLine_color_gui = '#d65d0e'

" ale
" For all languages unspecified in the dictionary, all possible linters will be run for those languages, just as when the dictionary is not defined.
let g:ale_linters = {
\   'tex' : ['chktex', 'vale'],
\   'latex' : ['chktex', 'vale'],
\   'text': ['vale'],
\}

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type= 2

" HowMuch
"The scale of the result:
let g:HowMuch_scale = 2
"the engine order for auto-calculation
let g:HowMuch_auto_engines = ['bc', 'vim', 'py']

" WhichKey
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
set timeoutlen=500

" vim-gtfo
let g:gtfo#terminals = { 'unix': 'alacritty --working-directory' }

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<c-r>=coc#on_enter()\<CR>\<C-g>u\<CR>"

" snippet
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gf <Plug>(coc-fix-current)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

augroup coc
  autocmd!
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end


" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Using CocList
nnoremap <silent> gt  :<C-u>CocList outline<cr>
command! Coc CocList diagnostics

augroup fmt
 autocmd!
 autocmd BufWritePre * try | undojoin | :call CocAction('format') | catch /^Vim\%((\a\+)\)\=:E790/ | finally | silent :call CocAction('format') | endtry
augroup END

" command! -nargs=0 Format :call CocAction('format')

" coc_status for airline
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
