#!/bin/bash

cd $(dirname $BASH_SOURCE)
BASE=$(pwd)

export GIT_SSL_NO_VERIFY=true
mkdir -p ~/.vim/autoload
curl --insecure -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim

# vimrc
mv -v ~/.vimrc ~/.vimrc.old 2> /dev/null
ln -sf $BASE/vimrc ~/.vimrc
ln -sf $BASE/mysnippets ~/.vim/
ln -sf $BASE/vale.ini ~/.vim/.vale.ini
ln -sf $BASE/ycm_extra_conf.py ~/.vim/.ycm_extra_conf

# nvim
if ! command -v nvim 2>/dev/null; then
  curl --insecure -fLo ~/bin/nvim https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
  chmod u+x ~/bin/nvim
fi
mkdir -p ~/.config/nvim/autoload
ln -sf $BASE/vimrc ~/.config/nvim/init.vim
ln -sf $BASE/coc-settings.json ~/.config/nvim/coc-settings.json
ln -sf ~/.vim/autoload/plug.vim ~/.config/nvim/autoload/

# dependence for plugins
#####################################################
[ ! -e ~/bin ] && mkdir -p ~/bin
[ ! -e ~/.local ] && mkdir -p ~/.local
[ ! -e ~/.local/bin ] && mkdir ~/.local/bin
[ ! -e ~/.local/include  ] && mkdir ~/.local/include
[ ! -e ~/.local/lib ] && mkdir ~/.local/lib
[ ! -e ~/.local/libexec ] && mkdir ~/.local/libexec
[ ! -e ~/.local/share ] && mkdir ~/.local/share

mkdir -p $BASE/tmp
# pip
if ! command -v pip 2>/dev/null; then
  if command -v python3 2>/dev/null; then
    curl --insecure -fLo $BASE/tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py
    python3 $BASE/tmp/get-pip.py --user
  elif command -v python2 2>/dev/null; then
    curl --insecure -fLo $BASE/tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py
    python $BASE/tmp/get-pip.py --user
  fi
fi

# node
if ! command -v node 2>/dev/null; then
  curl -sL install-node.now.sh/lts | sh -s -- --prefix=$HOME/.local
fi

# yarn
if ! command -v yarn 2>/dev/null; then
  curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
fi

rm -rf $BASE/tmp

# provider-python
if command -v pip3 2>/dev/null; then 
  pip3 install --user --upgrade neovim
  pip3 install --user neovim-remote
elif command -v pip2 2>/dev/null; then
  pip2 install --user --upgrade neovim
fi

env PAHT=~/.local/bin:~/bin:$PATH nvim +PlugInstall +'qall'

# coc extensions
mkdir -p ~/.config/coc/extensions
cd ~/.config/coc/extensions
if [ ! -f package.json ]
then
  echo '{"dependencies":{}}'> package.json
fi
# Change arguments to extensions you need
env PAHT=~/.local/bin:~/bin:$PATH yarn add coc-json coc-snippets
