#!/bin/bash

cd $(dirname $BASH_SOURCE)
BASE=$(pwd)

if command -v curl 2>/dev/null; then
  DL="curl --insecure -fLo"
elif command -v wget 2>/dev/null; then
  DL="wget -O"
fi

export GIT_SSL_NO_VERIFY=true

# configuration
mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
ln -sf ~/dotfiles/nvim ~/.config/

# nvim
if ! command -v ~/.local/bin/nvim 2>/dev/null; then
  $DL ~/.local/bin/nvim https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
  chmod u+x ~/.local/bin/nvim
fi

# dependence for plugins
#####################################################
mkdir -p ~/.local
mkdir -p ~/.local/bin
mkdir -p ~/.local/include
mkdir -p ~/.local/lib
mkdir -p ~/.local/libexec
mkdir -p ~/.local/share

mkdir -p $BASE/tmp

# node
if ! command -v node 2>/dev/null; then
  echo "Installing Node.js to user directory..."
  NODE_VERSION="23.6.1" # You can change to the desired LTS version
  NODE_ARCHIVE="node-v${NODE_VERSION}-linux-x64.tar.xz"
  NODE_URL="https://nodejs.org/dist/v${NODE_VERSION}/${NODE_ARCHIVE}"
  NODE_DIR="$HOME/.local/node"

  $DL $BASE/tmp/$NODE_ARCHIVE $NODE_URL
  mkdir -p "$NODE_DIR"
  tar -xJf $BASE/tmp/$NODE_ARCHIVE -C "$NODE_DIR" --strip-components=1

  # Create symlinks to ~/.local/bin
  ln -sf "$NODE_DIR/bin/node" "$HOME/.local/bin/node"
  ln -sf "$NODE_DIR/bin/npm" "$HOME/.local/bin/npm"
  ln -sf "$NODE_DIR/bin/npx" "$HOME/.local/bin/npx"
fi
eixt

# node
# if ! command -v node 2>/dev/null; then
#   $DL $BASE/tmp/install-node.sh https://install-node.now.sh/lts
#   bash $BASE/tmp/install-node.sh --prefix=$HOME/.local
# fi

# yarn
if ! command -v yarn 2>/dev/null; then
  $DL $BASE/tmp/yarn-install.sh https://yarnpkg.com/install.sh
  bash $BASE/tmp/yarn-install.sh
fi

# vale
if ! command -v vale 2>/dev/null; then
  $DL $BASE/tmp/vale_1.3.2_Linux_64-bit.tar.gz https://github.com/errata-ai/vale/releases/download/v1.3.2/vale_1.3.2_Linux_64-bit.tar.gz
  tar xzf $BASE/tmp/vale_1.3.2_Linux_64-bit.tar.gz -C $BASE/tmp
  mv $BASE/tmp/vale $HOME/.local/bin
fi

# lua
if ! command -v lua 2>/dev/null; then
  echo "Installing Lua to user directory..."
  LUA_VERSION="5.4.6"
  LUA_ARCHIVE="lua-${LUA_VERSION}.tar.gz"
  LUA_URL="https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz"
  LUA_SRC_DIR="$BASE/tmp/lua-src"

  $DL $BASE/tmp/$LUA_ARCHIVE $LUA_URL
  mkdir -p "$LUA_SRC_DIR"
  tar xzf $BASE/tmp/$LUA_ARCHIVE -C "$LUA_SRC_DIR" --strip-components=1
  cd "$LUA_SRC_DIR"

  # Choose a platform target if needed, 'linux' should work for most Linux systems
  PLATFORM="linux" # or 'macosx', 'freebsd', etc., check Lua install instructions if needed
  make $PLATFORM INSTALL_TOP=$HOME/.local
  make install INSTALL_TOP=$HOME/.local

  cd $BASE # Go back to base directory
fi

# luarocks
if ! command -v luarocks 2>/dev/null; then
  echo "Installing LuaRocks to user directory..."
  LUAROCKS_VERSION="3.11.1" # You can change to the latest version
  LUAROCKS_ARCHIVE="luarocks-${LUAROCKS_VERSION}.tar.gz"
  LUAROCKS_URL="https://luarocks.github.io/luarocks/releases/luarocks-${LUAROCKS_VERSION}.tar.gz"
  LUAROCKS_SRC_DIR="$BASE/tmp/luarocks-src"

  $DL $BASE/tmp/$LUAROCKS_ARCHIVE $LUAROCKS_URL
  mkdir -p "$LUAROCKS_SRC_DIR"
  tar xzf $BASE/tmp/$LUAROCKS_ARCHIVE -C "$LUAROCKS_SRC_DIR" --strip-components=1
  cd "$LUAROCKS_SRC_DIR"

  # Configure LuaRocks to use the user-installed Lua
  LUA_PREFIX="$HOME/.local"
  ./configure --prefix=$HOME/.local --with-lua=$LUA_PREFIX --with-lua-include=$LUA_PREFIX/include
  make build
  make install

  cd $BASE # Go back to base directory
fi

rm -rf $BASE/tmp

# provider-python
if command -v pip3 2>/dev/null; then
  pip3 install --user --upgrade pynvim
  pip3 install --user neovim-remote
elif command -v pip2 2>/dev/null; then
  pip2 install --user --upgrade pynvim
fi
